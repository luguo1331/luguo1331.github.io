<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyi&#39;s Blog</title>
  
  <subtitle>谈笑有风生，不搞大新闻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-07-24T17:12:26.583Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.junyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Https 原理使么惊！</title>
    <link href="http://yoursite.com/2018/07/24/Https%E5%8E%9F%E7%90%86%E4%BD%BF%E4%B9%88%E6%83%8A%EF%BC%81/"/>
    <id>http://yoursite.com/2018/07/24/Https原理使么惊！/</id>
    <published>2018-07-24T14:32:01.000Z</published>
    <updated>2018-07-24T17:12:26.583Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将通俗，简单的介绍一下 HTTPS 的实现原理 </p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTPS 简单来讲就是安全版的 HTTP 。 HTTP 是位于应用层的协议用于定义如何包装数据 , TCP 是传输层的协议用于如何传输数据 , 而 HTTPS 就是在这两层间加上一层加密层 TSL/SSL 。</p><a id="more"></a><p>下面来举个例子 ：</p><h3 id="对称加密-："><a href="#对称加密-：" class="headerlink" title="对称加密 ："></a>对称加密 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有一天，A &nbsp;想对 B 发一条信息，如何保证信息不被他人偷看到呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法很简单，A 和 B 两个人都选用同一种加密算法, A 用 算法1 对信息进行加密， 然后 B 再用 算法1 将信息解密， 好像很稳，这就是所谓的 <strong>对称加密算法</strong> ， 算法1 就是所谓的 <strong>秘钥</strong> 。</p><img src="/2018/07/24/Https原理使么惊！/1532446201(1).jpg" title="对称加密"><h3 id="非对称加密-："><a href="#非对称加密-：" class="headerlink" title="非对称加密 ："></a>非对称加密 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对称加密看起来很稳，然而问题来了，秘钥要如何传输给对方呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果直接传输秘钥岂不是等于没有加密。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里可以使用 <strong>非对称加密</strong> 的算法来加密对称加密的秘钥，非对称加密算法的特点是：<strong>公钥加密的信息只有私钥解密，私钥加密的信息只有公钥能解密</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果将私钥房子服务端，公钥放在客户端，这样至少可以保证客户端到服务端的信息是安全的。</p><img src="/2018/07/24/Https原理使么惊！/1532448007(1).jpg" title="非对称加密"><h3 id="中间人劫持-："><a href="#中间人劫持-：" class="headerlink" title="中间人劫持 ："></a>中间人劫持 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用非对称加密 + 对称加密 好像能够完美解决传递信息的安全和速度问题。但是真的那么美好吗？因为公钥是公开的，大家都能够获取得到，假如有别有用心的人，将服务端发来的公钥替换成自己的公钥再发给客户端，客户端用这个假的公钥加密对称加密的秘钥再发给服务端，中间人就能够用自己的私钥解密，然后获取到秘钥，这就是所谓的<strong>中间人劫持</strong></p><img src="/2018/07/24/Https原理使么惊！/1532449099(1).jpg" title="中间人劫持"><h3 id="认证中心："><a href="#认证中心：" class="headerlink" title="认证中心："></a>认证中心：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为公钥被掉包的缘故，我们又陷入了鸡生蛋蛋生鸡的问题。那么如何解决呢？既然服务器传输公钥给服务端是不安全的，那么我们能不能引入一个第三方机构，用这个第三方机构的私钥将服务端的公钥进行加密，客户端再用第三方的公钥解密出服务端的公钥，这个第三方机构就是所谓的 <strong>认证中心</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当网站向  CA（认证中心）提交了申请，CA 审核通过后，将证书颁发给网站，用户访问网站的时候，网站将证书给到用户，用户从证书中取出网站公钥。  </p><h3 id="证书可能存在哪些问题"><a href="#证书可能存在哪些问题" class="headerlink" title="证书可能存在哪些问题"></a>证书可能存在哪些问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到这里不知道大家心中有没有疑问， 服务端传过来的证书是用 CA 的公钥解密的，那。。。那不是谁都可以解开，也就是说服务端传来的数据有可能的是不安全的！那如何保证证书是合法的呢？证书又有可能面临什么呢问题呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书非法主要由两种情况 :<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、证书是伪造的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、证书被篡改过</p><h3 id="证书防伪"><a href="#证书防伪" class="headerlink" title="证书防伪"></a>证书防伪</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数字证书当中主要包含了 CA 机构的名字 、用CA私钥加密过的证书本身的数字签名、服务端公钥、证书签名用到的hash算法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书是伪造的，浏览器直接不认识over<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书被篡改过，用 CA 公钥将证书的数字签名解密，将解密出来的摘要用 hash 算法 hash 一下，再将结果与摘要进行对比，稳了。</p><h3 id="CA-的-‘根证书’"><a href="#CA-的-‘根证书’" class="headerlink" title="CA 的 ‘根证书’"></a>CA 的 ‘根证书’</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这来问题好像已经解决了，但不知道大家有没有疑惑，你 CA 的公钥要怎么传输服务端，如果直接传输过程当中又被中间人劫持怎么破？我们好像又陷入了鸡生蛋蛋生鸡的问题当中了。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实 CA 本身有自己的证书用来证明 CA 的身份的，不过你又怎么保证这份证书没有被篡改呢？那么只好由上一级 CA 来验证 CA 的身份了。。。于是这么一级级的上去，最后到达操作系统/浏览器预置的顶层 CA 证书 ，相当于你自动信任了它们。所以说搞了半天，你还是通过这种“寄硬盘”的方式来传送秘钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将通俗，简单的介绍一下 HTTPS 的实现原理 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTTPS 简单来讲就是安全版的 HTTP 。 HTTP 是位于应用层的协议用于定义如何包装数据 , TCP 是传输层的协议用于如何传输数据 , 而 HTTPS 就是在这两层间加上一层加密层 TSL/SSL 。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://yoursite.com/categories/HTTPS/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo文章折叠</title>
    <link href="http://yoursite.com/2018/07/24/Hexo%E6%96%87%E7%AB%A0%E6%8A%98%E5%8F%A0/"/>
    <id>http://yoursite.com/2018/07/24/Hexo文章折叠/</id>
    <published>2018-07-24T01:17:24.000Z</published>
    <updated>2018-07-24T01:18:22.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍一下Hexo当中将文章折叠的方法。</p></blockquote><p>在当写完博客的时候，Hexo默认将整篇文章展开，那样会导致全部文章堆积到一起，对读者非常不友好。这个时候可以将文章折叠起来，如果读者有兴趣就可以自己点开阅读。<br><a id="more"></a></p><h3 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h3><p>在想要折叠的地方加上以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><img src="/2018/07/24/Hexo文章折叠/1532354558(1).jpg" title="添加前"><img src="/2018/07/24/Hexo文章折叠/1532354740(1).jpg" title="添加后">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍一下Hexo当中将文章折叠的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当写完博客的时候，Hexo默认将整篇文章展开，那样会导致全部文章堆积到一起，对读者非常不友好。这个时候可以将文章折叠起来，如果读者有兴趣就可以自己点开阅读。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <link href="http://yoursite.com/2018/05/14/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/14/Hexo-GitHub-Pages-搭建个人博客/</id>
    <published>2018-05-14T13:23:59.000Z</published>
    <updated>2018-07-23T13:50:48.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。  </p></blockquote><p>本文将简单介绍如何利用 Hexo 和 GitHub Pages 搭建个人博客<br><a id="more"></a></p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：  </p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>   </li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>  </li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。  </p><blockquote><p>npm install -g hexo-cli    </p></blockquote><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><p>hexo init  </p></blockquote><blockquote><p>npm install</p></blockquote><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><blockquote><p>hexo new “文章名”</p></blockquote><p>新建的文章将会存在 source/_posts 中，_posts 就是默认模板，文章文件名称将会是 文章名.md，然后打开这个文件编辑完保存就ok了。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>写完博客后生成静态网页文件</p><blockquote><p>hexo g </p></blockquote><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>本地服务器启动完之后，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 来验证一下你写的文章预览效果。</p><blockquote><p>hexo s –debug</p></blockquote><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><h4 id="安装部署工具"><a href="#安装部署工具" class="headerlink" title="安装部署工具"></a>安装部署工具</h4><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开主配置文件，填上你的仓库地址</p><pre><code>deploy:  type: git  repository: https://github.com/xxx/xxxx.github.io.git  branch: master</code></pre><p>ssh这些不用讲了自己配一下</p><h4 id="最后部署网站到-GitHub"><a href="#最后部署网站到-GitHub" class="headerlink" title="最后部署网站到 GitHub"></a>最后部署网站到 GitHub</h4><blockquote><p>hexo d</p></blockquote><hr><p>之后如果再发布文章，可以直接用以下命令</p><blockquote><p>hexo clean<br>hexo d -g</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将简单介绍如何利用 Hexo 和 GitHub Pages 搭建个人博客&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
