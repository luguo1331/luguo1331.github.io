<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junyi&#39;s Blog</title>
  
  <subtitle>谈笑有风生，不搞大新闻</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-02T14:43:53.810Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.junyi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Https单向认证和双向认证介绍</title>
    <link href="http://yoursite.com/2018/08/02/Https%E5%8D%95%E5%90%91%E8%AE%A4%E8%AF%81%E5%92%8C%E5%8F%8C%E5%90%91%E8%AE%A4%E8%AF%81%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2018/08/02/Https单向认证和双向认证介绍/</id>
    <published>2018-08-02T14:03:59.000Z</published>
    <updated>2018-08-02T14:43:53.810Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将简单介绍一下在 HTTPS 中的单向认证和双向认证的过程。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;今天上班一早在问东哥问题时，东哥给我详细解释了一下单向认证和双向认证的过程，在这里记录一下。</p></blockquote><a id="more"></a><h3 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h3><p><a href="https://luguo1331.github.io/2018/07/24/Https%E5%8E%9F%E7%90%86%E4%BD%BF%E4%B9%88%E6%83%8A%EF%BC%81/" target="_blank" rel="noopener">Https 原理使么惊！</a>在这里就不在赘述了，有兴趣的小伙伴可以看一下。</p><h3 id="单向认证"><a href="#单向认证" class="headerlink" title="单向认证"></a>单向认证</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;单向认证的过程比较简单，过程大概有以下流程：</p><ul><li>客户端向服务端连接发送请求</li><li>服务端返回客户端服务器的证书</li><li>客户端验证服务器发来的证书</li><li>验证通过后客户端发送自己支持的加密算法，供服务器选择</li><li>服务器在其中选择加密程度最高的算法返回给客户端</li><li>客户端接收到算法后，用此算法生成随机码用作以后对称加密的秘钥，然后用服务器公钥加密再返回给服务端</li><li>服务端用私钥解密信息获得对称加密秘钥，然后从此快乐地通信  <img src="/2018/08/02/Https单向认证和双向认证介绍/9a843ca1347d54182b105a3b835c9ba9_692143-20180402112943720-791035112.png" title="单向认证握手图(网图，侵删)"></li></ul><h3 id="双向认证"><a href="#双向认证" class="headerlink" title="双向认证"></a>双向认证</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;双向认证的过程比较其实和单向认证大同小异，只不过是增加了服务端对客户端的验证，过程大概有以下流程：</p><ul><li>客户端向服务端连接发送请求</li><li>服务端返回客户端服务器的证书</li><li>客户端验证服务器发来的证书</li><li>校验通过后，客户端将自己的证书发送给服务端</li><li>服务端对客户端证书进行校验</li><li>验证通过后客户端发送自己支持的加密算法，供服务器选择</li><li>服务器在其中选择加密程度最高的算法返回给客户端</li><li>客户端接收到算法后，用此算法生成随机码用作以后对称加密的秘钥，然后用服务器公钥加密再返回给服务端</li><li>服务端用私钥解密信息获得对称加密秘钥，然后从此快乐地通信  <img src="/2018/08/02/Https单向认证和双向认证介绍/e699f9fb7744f644b8bedfd3741d53a2_692143-20180402113029432-1821794552.png" title="双向认证握手图(网图，侵删)"></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将简单介绍一下在 HTTPS 中的单向认证和双向认证的过程。&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;今天上班一早在问东哥问题时，东哥给我详细解释了一下单向认证和双向认证的过程，在这里记录一下。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://yoursite.com/categories/HTTPS/"/>
    
    
      <category term="HTTPS" scheme="http://yoursite.com/tags/HTTPS/"/>
    
  </entry>
  
  <entry>
    <title>在Linux下使用Rinetd来实现端口转发</title>
    <link href="http://yoursite.com/2018/08/02/%E5%9C%A8Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Rinetd%E6%9D%A5%E5%AE%9E%E7%8E%B0%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"/>
    <id>http://yoursite.com/2018/08/02/在Linux下使用Rinetd来实现端口转发/</id>
    <published>2018-08-02T13:00:06.000Z</published>
    <updated>2018-08-02T13:36:54.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将简单介绍一下再 Linux 下如何使用 Rinetd 来实现端口转发</p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实习的第三天，东哥找到我，让我将内网的东西透过一台服务器转发到公网，想了一下可以使用 Linux 自带的 IPtables 来实现,但是配置起来好像有点麻烦， 用 Nginx 来实现的话本身也有点限制，不过东哥也建议我用 Rinetd 来实现，毕竟 Rinetd 比 IPtables 来说更加短小、高效，配置也更加简单。那好吧，既然领导也这样要求，我就随着大佬的节奏扭动着身躯说：“干”。</p><a id="more"></a><h3 id="什么是-Rinetd"><a href="#什么是-Rinetd" class="headerlink" title="什么是 Rinetd"></a>什么是 Rinetd</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Rinetd 其实就是一个在 Linux 系统中为重定向传输控制协议连接的一个工具，简单来讲就是可以实现将本机端口接收到的请求到远程服务器端口上。其实在 Linux 下端口转发一般都是使用 IPtables 来现实，不过 Rinetd 的优势在于更加短小、高效，而且配置也非常简单。  </p><h3 id="配置第三方源"><a href="#配置第三方源" class="headerlink" title="配置第三方源"></a>配置第三方源</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ vim  /etc/yum.repos.d/nux-misc.repo:</span><br><span class="line"></span><br><span class="line">[nux-misc]</span><br><span class="line">name=Nux Misc</span><br><span class="line">baseurl=http://li.nux.ro/download/nux/misc/el6/x86_64/</span><br><span class="line">enabled=0</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro</span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum --enablerepo=nux-misc install rinetd</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>去到 /etc/rinetd.conf 打开配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[bindaddress] [bindport] [connectaddress] [connectport]</span><br><span class="line"> 绑定的地址     绑定的端口   连接的地址        连接的端口</span><br></pre></td></tr></table></figure><p>配置规则真的是非常简单明了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">0.0.0.0 8080 192.16.162.3 8080</span><br><span class="line">allow *.*.*.*</span><br><span class="line">logfile /var/log/rinetd.log</span><br></pre></td></tr></table></figure><blockquote><p>说明：上面的配置的意思就是讲 0.0.0.0 （本机）的 8080 端口接收到的所有请求都转发到 192.16.162.3 的 8080 端口上。<br>allow设置允许访问的ip地址信息,<em>.</em>.<em>.</em>表示所有IP地址<br>logfil设置打印的log的位置</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将简单介绍一下再 Linux 下如何使用 Rinetd 来实现端口转发&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;实习的第三天，东哥找到我，让我将内网的东西透过一台服务器转发到公网，想了一下可以使用 Linux 自带的 IPtables 来实现,但是配置起来好像有点麻烦， 用 Nginx 来实现的话本身也有点限制，不过东哥也建议我用 Rinetd 来实现，毕竟 Rinetd 比 IPtables 来说更加短小、高效，配置也更加简单。那好吧，既然领导也这样要求，我就随着大佬的节奏扭动着身躯说：“干”。&lt;/p&gt;
    
    </summary>
    
      <category term="Rinetd" scheme="http://yoursite.com/categories/Rinetd/"/>
    
    
      <category term="Rinetd" scheme="http://yoursite.com/tags/Rinetd/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>设计一个又getMin功能的栈</title>
    <link href="http://yoursite.com/2018/08/01/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8F%88getMin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/"/>
    <id>http://yoursite.com/2018/08/01/设计一个又getMin功能的栈/</id>
    <published>2018-08-01T14:07:39.000Z</published>
    <updated>2018-08-01T15:09:41.236Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【题目】"><a href="#【题目】" class="headerlink" title="【题目】"></a>【题目】</h3><p>实现一个特殊的栈，在实现栈的基础功能的基础上，在实现返回栈中最小元素的操作。</p><h3 id="【要求】"><a href="#【要求】" class="headerlink" title="【要求】"></a>【要求】</h3><p>1.pop、push、getMin操作的时间复杂度都是O(1)。<br>2.设计的栈类型可以使用现成的栈结构。</p><a id="more"></a><h3 id="【解答】"><a href="#【解答】" class="headerlink" title="【解答】"></a>【解答】</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据题目的提示很容易就会想到用两个栈来实现，一个栈用来保存元素，记为 stackData ，一个栈拿来记录最小值，记为 stackMin 。          stackData 的实现没有什么疑问, stackMin 的实现有两种方式。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一种：在 stackMin 中每次只压入比栈顶小的元素，每个元素只会被压入栈中一次，所以 stackMin 中的元素个数会比 stackData 的少，因此每次出栈的时候要 stackData.pop() 与 stackMin.peek() 的值是否相等，如果相等的话 stackMin.pop() 。这样做的好处是节省了空间， 所以这种方法属于<strong>牺牲时间换空间</strong>。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二种：在  stackData 每次压入数据的时候都会与 stackMin.peak() 比较一下，如果压入 stackData 的数据比较大，就 stackMin.push(stackMin.peak()) 把 stackMin 的栈顶元素再次压入到 stackMin 当中， 这样到最后 stackData 与stackMin 的长度是会一样的。这样做的好处就是每次出栈的时候不用再次比较两个值的大小，但是相应的入栈的时候会浪费空间， 所以这种操作也算是<strong>牺牲空间换时间</strong>。  </p><h3 id="【代码实现】"><a href="#【代码实现】" class="headerlink" title="【代码实现】"></a>【代码实现】</h3><h4 id="第一种："><a href="#第一种：" class="headerlink" title="第一种："></a>第一种：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mystack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mystck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stackData = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.stackMin = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> newNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackMin.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.push(newNum);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(newNum &lt;= <span class="keyword">this</span>.getMin())&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.push(newNum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stackDta.push(newNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">puclic <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackDta.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RunTimeException(<span class="string">"stck is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> value = <span class="keyword">this</span>.stackData.pop();</span><br><span class="line">        <span class="keyword">if</span>(value == <span class="keyword">this</span>.getMin())&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.pop();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackMin.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RunTimeException(<span class="string">"stack is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stackMin.peak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种："><a href="#第二种：" class="headerlink" title="第二种："></a>第二种：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mystack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackData;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;Integer&gt; stackMin;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Mystck</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.stackData = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">this</span>.stackMin = <span class="keyword">new</span> Stack&lt;Integer&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> newNum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackMin.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.push(newNum);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(newNum &lt;= <span class="keyword">this</span>.getMin())&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.push(newNum);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.stackMin.push(<span class="keyword">this</span>.stackMin.peak());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stackDta.push(newNum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">puclic <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackDta.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RunTimeException(<span class="string">"stck is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stackMin.pop();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.stackData.pop();;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.stackMin.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RunTimeException(<span class="string">"stack is empty!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.stackMin.peak();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;【题目】&quot;&gt;&lt;a href=&quot;#【题目】&quot; class=&quot;headerlink&quot; title=&quot;【题目】&quot;&gt;&lt;/a&gt;【题目】&lt;/h3&gt;&lt;p&gt;实现一个特殊的栈，在实现栈的基础功能的基础上，在实现返回栈中最小元素的操作。&lt;/p&gt;
&lt;h3 id=&quot;【要求】&quot;&gt;&lt;a href=&quot;#【要求】&quot; class=&quot;headerlink&quot; title=&quot;【要求】&quot;&gt;&lt;/a&gt;【要求】&lt;/h3&gt;&lt;p&gt;1.pop、push、getMin操作的时间复杂度都是O(1)。&lt;br&gt;2.设计的栈类型可以使用现成的栈结构。&lt;/p&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>程序员代码面试指南</title>
    <link href="http://yoursite.com/2018/08/01/%E7%A8%8B%E5%BA%8F%E5%91%98%E4%BB%A3%E7%A0%81%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <id>http://yoursite.com/2018/08/01/程序员代码面试指南/</id>
    <published>2018-08-01T12:59:08.000Z</published>
    <updated>2018-08-01T15:29:58.332Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>【目录】《程序员代码面试指南》读书笔记</p></blockquote><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>做过很多所谓的算法题，但是由于本人有点浮躁的原因，总是做了又忘，于是感触把做过的题，看过的书记录下来，以背以后能复习。</p><h3 id="第-1-章-栈和队列"><a href="#第-1-章-栈和队列" class="headerlink" title="第 1 章 栈和队列"></a>第 1 章 栈和队列</h3><ul><li><a href="https://luguo1331.github.io/2018/08/01/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%8F%88getMin%E5%8A%9F%E8%83%BD%E7%9A%84%E6%A0%88/#more" target="_blank" rel="noopener">设计一个又getMin功能的栈</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;【目录】《程序员代码面试指南》读书笔记&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="算法和数据结构" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据-初识Hapdoop</title>
    <link href="http://yoursite.com/2018/07/27/%E5%A4%A7%E6%95%B0%E6%95%B0%E6%8D%AE-%E5%88%9D%E8%AF%86Hapdoop/"/>
    <id>http://yoursite.com/2018/07/27/大数数据-初识Hapdoop/</id>
    <published>2018-07-27T12:52:13.000Z</published>
    <updated>2018-07-27T15:21:41.439Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将简单地介绍一下狭义的 Hadoop 的一些基本概念</p></blockquote><a id="more"></a><h3 id="Hadoop-是什么"><a href="#Hadoop-是什么" class="headerlink" title="Hadoop 是什么"></a>Hadoop 是什么</h3><p><a href="http://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop</a> 是一个可靠的、可拓展的、分布式的大型数据计算框架。<br>在 Hadoop 中包含这以下几个模块:  </p><ul><li>Hadoop Common : 提供了一些常用的工具来支持其他模块</li><li>HDFS : 一个分布式文件系统</li><li>YARN : 任务调度和集群资源管理的框架</li><li>MapReduce : 一个计算框架</li></ul><h3 id="Hadoop-有什么用"><a href="#Hadoop-有什么用" class="headerlink" title="Hadoop 有什么用"></a>Hadoop 有什么用</h3><p>Hadoop 主要能搭建大型数据仓库，PB级数据的存储、处理、分析、统计等业务  </p><ul><li>搜索引擎</li><li>日志分析</li><li>数据挖掘</li><li>商业智能</li></ul><h3 id="Hadoop-核心组件-HDFS"><a href="#Hadoop-核心组件-HDFS" class="headerlink" title="Hadoop 核心组件 - HDFS"></a>Hadoop 核心组件 - HDFS</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS 来源于 Google 的 GFS ，因为 Google 只开源了论文，因此 Doug Cutting 和 Mike Cafarella 按照论文实现了类似于 GFS 的功能，这就是 HDFS 的前身。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HDFS具有易拓展、高容错性、海量数据存储的特点。相比于传统的文件系统的硬盘寻址方式, HDFS 通过引入存放文件信息的服务器 Namenode 和实际存放数据的服务器 Datanode 进行串接,以实现对数据系统进行快速的分布式储存读取。</p><img src="/2018/07/27/大数数据-初识Hapdoop/d4a147747eef02ecab7233973ce764fa_SouthEast.jpg"><h3 id="Hadoop-核心组件-MapReduce"><a href="#Hadoop-核心组件-MapReduce" class="headerlink" title="Hadoop 核心组件 - MapReduce"></a>Hadoop 核心组件 - MapReduce</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着 Google 发布了 MapReduce 论文, Mike Cafarella 也实现了一个最初版本的 MapReduce 。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MapReduce 具有易拓展、高容错性、海量数据离线处理得特点。MapReduce 的核心思想是对任务进行拆分（Map计算\Reduce计算）再根据任务调度器（JobTracker）对任务进行分布式计算。</p><img src="/2018/07/27/大数数据-初识Hapdoop/1532701686(1).jpg"><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>总的来讲 Hadoop 就是一个在分布式服务集群上的存储海量数据和运行分布式分析应用的平台，其核心组件是 HDFS 和 MapReduce 。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将简单地介绍一下狭义的 Hadoop 的一些基本概念&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="大数据" scheme="http://yoursite.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Https 原理使么惊！</title>
    <link href="http://yoursite.com/2018/07/24/Https%E5%8E%9F%E7%90%86%E4%BD%BF%E4%B9%88%E6%83%8A%EF%BC%81/"/>
    <id>http://yoursite.com/2018/07/24/Https原理使么惊！/</id>
    <published>2018-07-24T14:32:01.000Z</published>
    <updated>2018-07-25T01:05:51.443Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将通俗，简单的介绍一下 HTTPS 的实现原理 </p></blockquote><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;HTTPS 简单来讲就是安全版的 HTTP 。 HTTP 是位于应用层的协议用于定义如何包装数据 , TCP 是传输层的协议用于如何传输数据 , 而 HTTPS 就是在这两层间加上一层加密层 TSL/SSL 。</p><a id="more"></a><p>下面来举个例子 ：</p><h3 id="对称加密-："><a href="#对称加密-：" class="headerlink" title="对称加密 ："></a>对称加密 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果有一天，A &nbsp;想对 B 发一条信息，如何保证信息不被他人偷看到呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;方法很简单，A 和 B 两个人都选用同一种加密算法, A 用 算法1 对信息进行加密， 然后 B 再用 算法1 将信息解密， 好像很稳，这就是所谓的 <strong>对称加密算法</strong> ， 算法1 就是所谓的 <strong>秘钥</strong> 。</p><img src="/2018/07/24/Https原理使么惊！/1532446201(1).jpg" title="对称加密"><h3 id="非对称加密-："><a href="#非对称加密-：" class="headerlink" title="非对称加密 ："></a>非对称加密 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对称加密看起来很稳，然而问题来了，秘钥要如何传输给对方呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果直接传输秘钥岂不是等于没有加密。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里可以使用 <strong>非对称加密</strong> 的算法来加密对称加密的秘钥，非对称加密算法的特点是：<strong>公钥加密的信息只有私钥解密，私钥加密的信息只有公钥能解密</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果将私钥放在服务端，公钥放在客户端，这样至少可以保证客户端到服务端的信息是安全的。</p><img src="/2018/07/24/Https原理使么惊！/1532448007(1).jpg" title="非对称加密"><h3 id="中间人劫持-："><a href="#中间人劫持-：" class="headerlink" title="中间人劫持 ："></a>中间人劫持 ：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用非对称加密 + 对称加密 好像能够完美解决传递信息的安全和速度问题。但是真的那么美好吗？因为公钥是公开的，大家都能够获取得到，假如有别有用心的人，将服务端发来的公钥替换成自己的公钥再发给客户端，客户端用这个假的公钥加密对称加密的秘钥再发给服务端，中间人就能够用自己的私钥解密，然后获取到秘钥，这就是所谓的<strong>中间人劫持</strong></p><img src="/2018/07/24/Https原理使么惊！/1532449099(1).jpg" title="中间人劫持"><h3 id="认证中心："><a href="#认证中心：" class="headerlink" title="认证中心："></a>认证中心：</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因为公钥被掉包的缘故，我们又陷入了鸡生蛋蛋生鸡的问题。那么如何解决呢？既然服务器传输公钥给服务端是不安全的，那么我们能不能引入一个第三方机构，用这个第三方机构的私钥将服务端的公钥进行加密，客户端再用第三方的公钥解密出服务端的公钥，这个第三方机构就是所谓的 <strong>认证中心</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当网站向  CA（认证中心）提交了申请，CA 审核通过后，将证书颁发给网站，用户访问网站的时候，网站将证书给到用户，用户从证书中取出网站公钥。  </p><h3 id="证书可能存在哪些问题"><a href="#证书可能存在哪些问题" class="headerlink" title="证书可能存在哪些问题"></a>证书可能存在哪些问题</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;看到这里不知道大家心中有没有疑问， 服务端传过来的证书是用 CA 的公钥解密的，那。。。那不是谁都可以解开，也就是说服务端传来的数据有可能的是不安全的！那如何保证证书是合法的呢？证书又有可能面临什么呢问题呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书非法主要由两种情况 :<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1、证书是伪造的<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2、证书被篡改过</p><h3 id="证书防伪"><a href="#证书防伪" class="headerlink" title="证书防伪"></a>证书防伪</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数字证书当中主要包含了 CA 机构的名字 、用CA私钥加密过的证书本身的数字签名、服务端公钥、证书签名用到的hash算法<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书是伪造的，浏览器直接不认识over<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;证书被篡改过，用 CA 公钥将证书的数字签名解密，将解密出来的摘要用 hash 算法 hash 一下，再将结果与摘要进行对比，稳了。</p><h3 id="CA-的-‘根证书’"><a href="#CA-的-‘根证书’" class="headerlink" title="CA 的 ‘根证书’"></a>CA 的 ‘根证书’</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这来问题好像已经解决了，但不知道大家有没有疑惑，你 CA 的公钥要怎么传输服务端，如果直接传输过程当中又被中间人劫持怎么破？我们好像又陷入了鸡生蛋蛋生鸡的问题当中了。。。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其实 CA 本身有自己的证书用来证明 CA 的身份的，不过你又怎么保证这份证书没有被篡改呢？那么只好由上一级 CA 来验证 CA 的身份了。。。于是这么一级级的上去，最后到达操作系统/浏览器预置的顶层 CA 证书 ，相当于你自动信任了它们。所以说搞了半天，你还是通过这种“寄硬盘”的方式来传送秘钥。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将通俗，简单的介绍一下 HTTPS 的实现原理 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;HTTPS 简单来讲就是安全版的 HTTP 。 HTTP 是位于应用层的协议用于定义如何包装数据 , TCP 是传输层的协议用于如何传输数据 , 而 HTTPS 就是在这两层间加上一层加密层 TSL/SSL 。&lt;/p&gt;
    
    </summary>
    
      <category term="HTTPS" scheme="http://yoursite.com/categories/HTTPS/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo文章折叠</title>
    <link href="http://yoursite.com/2018/07/24/Hexo%E6%96%87%E7%AB%A0%E6%8A%98%E5%8F%A0/"/>
    <id>http://yoursite.com/2018/07/24/Hexo文章折叠/</id>
    <published>2018-07-24T01:17:24.000Z</published>
    <updated>2018-07-24T01:18:22.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文将介绍一下Hexo当中将文章折叠的方法。</p></blockquote><p>在当写完博客的时候，Hexo默认将整篇文章展开，那样会导致全部文章堆积到一起，对读者非常不友好。这个时候可以将文章折叠起来，如果读者有兴趣就可以自己点开阅读。<br><a id="more"></a></p><h3 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h3><p>在想要折叠的地方加上以下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><img src="/2018/07/24/Hexo文章折叠/1532354558(1).jpg" title="添加前"><img src="/2018/07/24/Hexo文章折叠/1532354740(1).jpg" title="添加后">]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文将介绍一下Hexo当中将文章折叠的方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当写完博客的时候，Hexo默认将整篇文章展开，那样会导致全部文章堆积到一起，对读者非常不友好。这个时候可以将文章折叠起来，如果读者有兴趣就可以自己点开阅读。&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitHub Pages 搭建个人博客</title>
    <link href="http://yoursite.com/2018/05/14/Hexo-GitHub-Pages-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/05/14/Hexo-GitHub-Pages-搭建个人博客/</id>
    <published>2018-05-14T13:23:59.000Z</published>
    <updated>2018-07-23T13:50:48.764Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。  </p></blockquote><p>本文将简单介绍如何利用 Hexo 和 GitHub Pages 搭建个人博客<br><a id="more"></a></p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：  </p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a>   </li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>  </li></ul><p>如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装。  </p><blockquote><p>npm install -g hexo-cli    </p></blockquote><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><blockquote><p>hexo init  </p></blockquote><blockquote><p>npm install</p></blockquote><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><blockquote><p>hexo new “文章名”</p></blockquote><p>新建的文章将会存在 source/_posts 中，_posts 就是默认模板，文章文件名称将会是 文章名.md，然后打开这个文件编辑完保存就ok了。</p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><p>写完博客后生成静态网页文件</p><blockquote><p>hexo g </p></blockquote><h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><p>本地服务器启动完之后，访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 来验证一下你写的文章预览效果。</p><blockquote><p>hexo s –debug</p></blockquote><h3 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h3><h4 id="安装部署工具"><a href="#安装部署工具" class="headerlink" title="安装部署工具"></a>安装部署工具</h4><blockquote><p>npm install hexo-deployer-git –save</p></blockquote><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><p>打开主配置文件，填上你的仓库地址</p><pre><code>deploy:  type: git  repository: https://github.com/xxx/xxxx.github.io.git  branch: master</code></pre><p>ssh这些不用讲了自己配一下</p><h4 id="最后部署网站到-GitHub"><a href="#最后部署网站到-GitHub" class="headerlink" title="最后部署网站到 GitHub"></a>最后部署网站到 GitHub</h4><blockquote><p>hexo d</p></blockquote><hr><p>之后如果再发布文章，可以直接用以下命令</p><blockquote><p>hexo clean<br>hexo d -g</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 是一个快速、简洁且高效的博客框架。  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文将简单介绍如何利用 Hexo 和 GitHub Pages 搭建个人博客&lt;br&gt;
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/categories/Hexo/"/>
    
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
